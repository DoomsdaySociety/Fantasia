buildscript {
    repositories {
        maven { url = 'https://maven.aliyun.com/repository/central' }
        maven { url = 'https://maven.minecraftforge.net/' }
        maven { url = 'https://repo.spongepowered.org/maven' }
        mavenCentral()
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:3.+'
        classpath 'org.spongepowered:mixingradle:0.7-SNAPSHOT'
    }
}
repositories {
    maven { url = 'https://maven.aliyun.com/repository/central' }
    maven { url = 'https://maven.minecraftforge.net/' }
    maven { url = 'https://repo.spongepowered.org/maven' }
    mavenCentral()
}
apply plugin: 'java'
apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'org.spongepowered.mixin'

dependencies {
    minecraft 'net.minecraftforge:forge:1.12.2-14.23.5.2859'
    compile 'org.spongepowered:mixin:0.8-SNAPSHOT'
}

version = '1.0.2'
group = 'top.mrxiaom.fantasia'
archivesBaseName = 'Fantasia'

sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8'
compileJava.options.encoding = 'UTF-8'

minecraft {
    mappings channel: 'snapshot', version: '20171003-1.12'
    runs {
        client {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'

            args '--username', 'LittleCatX'
            jvmArgs.plus '-Dfile.encoding=UTF-8'
        }
    }
}
sourceSets {
    main {
        ext.refMap = "mixins.fantasia.refmap.json"
    }
}
jar {
    zip64 = true
    from {
        zipTree configurations.compile.find {it.name.contains 'mixin' }
    }
    manifest {
        attributes([
                'TweakClass': 'org.spongepowered.asm.launch.MixinTweaker',
                'MixinConfigs': 'mixins.fantasia.json',
                'FMLCorePluginContainsFMLMod': 'false',
                'FMLCorePlugin': 'top.mrxiaom.fantasia.FMLPlugin'
        ])
    }
    finalizedBy('reobfJar')
}
task buildAndRunClient (type: Copy) {
    // 因为特殊原因，FMLCoreMod 无法加载资源
    // 只好用这种硬核方法，构建后丢到 mods 里启动
    String filename = archivesBaseName + '-' + version + '.jar';
    File modOldFile = new File(buildDir, 'libs/' + filename)
    File modNewFile = new File(projectDir, 'run/mods/')
    modOldFile.delete()
    dependsOn 'build'

    from modOldFile
    into modNewFile

    finalizedBy 'runClient'
}
